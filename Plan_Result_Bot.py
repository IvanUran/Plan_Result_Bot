import logging
from time import sleep
import datetime
import telebot
from aiogram import Bot, Dispatcher, executor, types
from Keyboards import choose_fighter_reply, yes_no_inline, plan_inline4
from Addition_func import attributes_receiving_message, attributes_receiving_call, \
    plan_change, feelings_motivation_sleep_handler, chart_create, mode_of_plan_handler
from File_check_functions import plan_write_check, mode_of_plan_check, keyb_check, num_of_do_check, statistics_check

token = –í–ø–∏—à–∏—Ç–µ —Ç–æ–∫–µ–Ω
bot_telebot = telebot.TeleBot(token)
bot_main = Bot(token)
# mode_of_plan_check(username, "w", text="None")
usernames_with_indices = {}  # –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: —ç–Ω–µ—Ä–≥–∏—è, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞, –¥–∞—Ç–∞

dispatcher = Dispatcher(bot_main)


@dispatcher.message_handler(content_types=['text'])
async def main_function(message):
    global usernames_with_indices
    add_text = ""
    plan_inline = None
    send_mes = False
    # print(message)
    mes_text, username, from_chat, message_id, plan, plan_lines = attributes_receiving_message(message)

    if not username in usernames_with_indices:
        usernames_with_indices[username] = ""
    if username == None: username = "None"  # –ö–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–≤–æ–µ–≥–æ id, –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ç–æ–Ω–Ω–∞ –æ—à–∏–±–æ–∫, —ç—Ç–æ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    print(f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ({message_id}) –≤', message.date, f'—Å —Ç–µ–∫—Å—Ç–æ–º "{mes_text}" –æ—Ç {username, type(username)} –∏–∑ —á–∞—Ç–∞', from_chat)
    if mes_text == '–ü–õ–ê–ù':
        plan_write_check(username, "w", "False")
        mode_of_plan_check(username, "w", text="None")
    plan_write = plan_write_check(username, "r")
    if plan_write:
        try:
            await bot_main.delete_message(from_chat, message_id - 1)
            await bot_main.delete_message(from_chat, message_id)
            send_mes = True
        except Exception as ex:
            print(f"–ü—Ä–æ–∏–∑–æ—à—ë–ª {ex} —É –ø–ª–∞–Ω–∞")
    mode_of_plan = mode_of_plan_check(username, "r")
    if mode_of_plan != "None":
        usernames_with_indices, plan, send_mes, plan_inline, add_text = await mode_of_plan_handler(bot_main, message, mode_of_plan, usernames_with_indices)

    # =======================–ë–õ–û–ö====–ü–†–û–í–ï–†–ö–ò====–¢–ï–ö–°–¢–ê====–°–û–û–ë–©–ï–ù–ò–ô==================================================================

    if mes_text == "–ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏":
        response = chart_create(username)
        if response == None:
            await bot_main.send_message(chat_id=from_chat, text="–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Ç—ã –µ—â—ë –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
        else:
            await bot_main.send_photo(chat_id=from_chat, photo=open(f'vars/{username}/statistics.png', "rb"), caption="@" + username)
    if mes_text == "/start" or mes_text == "/start@Plan_Result_Bot":
        await bot_main.send_message(chat_id=from_chat, text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ üó°–±–æ–π—Ü–∞üõ°Ô∏èÔ∏è", reply_markup=choose_fighter_reply)
    if mes_text == "–ò–¢–û–ì(–Ω–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –º–µ–Ω—è)":
        await bot_main.send_message(chat_id=from_chat, text="–ê –≤–æ—Ç –Ω–µ —Å–¥–µ–ª–∞—é —è —Ç–µ–±–µ –∏—Ç–æ–≥, –∞ —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª, —á—É–¥–∞ –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å? –ï—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ, –¥–æ–≤–æ–ª—å—Å—Ç–≤—É–π—Å—è –ø–ª–∞–Ω–æ–º")
    if mes_text == "–ü–õ–ê–ù":
        num_of_do_check(username, "w", 0)
        keyb_check(username, "w", "1")
        plan_write_check(username, "w", True)
        now = datetime.datetime.now()

        mode_of_plan_check(username, "w", text="feelings")
        if username is None:
            username = "None"
        if username == "None":
            addd_text = "(—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –∏–º—è –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –±–∞–≥–æ–≤)"
        else:
            addd_text = ""
        plan = f"*#–ø–ª–∞–Ω–¥–Ω—è @{username + addd_text}* –æ—Ç `{now.strftime('%d.%m_%H:%M')}`"
        plan_inline = None
        await bot_main.send_mess—ëage(chat_id=from_chat, text=plan, reply_markup=plan_inline, parse_mode="Markdown")
        await bot_main.send_message(chat_id=from_chat, text="–ö–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å(–æ—Ç 1 –¥–æ 100)?")
        send_mes = False

    if send_mes:
        if plan_inline == None:
            await bot_main.send_message(chat_id=from_chat, text=plan, parse_mode="Markdown")
        elif plan_inline != None:
            await bot_main.send_message(chat_id=from_chat, text=plan, reply_markup=plan_inline, parse_mode="Markdown")
    if add_text != "":
        await bot_main.send_message(chat_id=from_chat, text=add_text)

    with open(f'vars/{username}/plan.txt', 'w') as f:
        f.write(str(plan))


@dispatcher.callback_query_handler(lambda callback_query: True)
async def osnova_callback(call: types.CallbackQuery):
    global usernames_with_indices

    # print(call)
    mes_text, username, from_chat, message_id, plan = attributes_receiving_call(call)
    foo = mes_text[:20].replace("\n", "\\n")
    print(f'–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º "{foo}..." –æ—Ç {username} –∏–∑ —á–∞—Ç–∞', from_chat)

    if call.data == 'complete':
        await bot_main.send_message(chat_id=from_chat, text="–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≥–æ—Ç–æ–≤ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–ª–∞–Ω?", reply_markup=yes_no_inline)
    if call.data == 'yes' or call.data == 'no' or call.data == 'del':
        await bot_main.delete_message(from_chat, message_id)
        await bot_main.delete_message(from_chat, message_id - 1)

        if call.data == 'yes':
            usernames_with_indices[username] += call.message.date.strftime("%d.%m.%Y") + "\n"
            statistics_check(username, "a", text=usernames_with_indices[username])
            plan_write_check(username, "w", False)
            mode_of_plan_check(username, "w", text="None")
            await bot_main.send_message(chat_id=from_chat, text=plan, parse_mode="Markdown")
        elif call.data == 'no':
            await bot_main.send_message(chat_id=from_chat, text=plan, reply_markup=keyb_check(username, "r"), parse_mode="Markdown")
        elif call.data == 'del':
            plan_write_check(username, "w", False)
            mode_of_plan_check(username, "w", text="None")

    await bot_main.answer_callback_query(call.id)


if __name__ == "__main__":
    executor.start_polling(dispatcher)
